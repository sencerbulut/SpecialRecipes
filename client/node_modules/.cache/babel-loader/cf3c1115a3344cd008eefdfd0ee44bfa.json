{"ast":null,"code":"import { getAllOrder, deleteOrder } from \"./FetchApi\";\nexport const fetchData = async dispatch => {\n  dispatch({\n    type: \"loading\",\n    payload: true\n  });\n  let responseData = await getAllOrder();\n  setTimeout(() => {\n    if (responseData && responseData.Orders) {\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: responseData.Orders\n      });\n      dispatch({\n        type: \"loading\",\n        payload: false\n      });\n    }\n  }, 1000);\n};\n/* This method call the editmodal & dispatch category context */\n\nexport const editOrderReq = (oId, type, status, dispatch) => {\n  if (type) {\n    console.log(\"click update\");\n    dispatch({\n      type: \"updateOrderModalOpen\",\n      oId: oId,\n      status: status\n    });\n  }\n};\nexport const deleteOrderReq = async (oId, dispatch) => {\n  let responseData = await deleteOrder(oId);\n  console.log(responseData);\n\n  if (responseData && responseData.success) {\n    fetchData(dispatch);\n  }\n};\n/* Filter All Order */\n\nexport const filterOrder = async (type, data, dispatch, dropdown, setDropdown) => {\n  let responseData = await getAllOrder();\n\n  if (responseData && responseData.Orders) {\n    let newData;\n\n    if (type === \"All\") {\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: responseData.Orders\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Not processed\") {\n      newData = responseData.Orders.filter(item => item.status === \"Not processed\");\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Processing\") {\n      newData = responseData.Orders.filter(item => item.status === \"Processing\");\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Shipped\") {\n      newData = responseData.Orders.filter(item => item.status === \"Shipped\");\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Delivered\") {\n      newData = responseData.Orders.filter(item => item.status === \"Delivered\");\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Cancelled\") {\n      newData = responseData.Orders.filter(item => item.status === \"Cancelled\");\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: newData\n      });\n      setDropdown(!dropdown);\n    }\n  }\n};","map":{"version":3,"sources":["D:/308 Project/SpecialRecipes - Kopya/client/src/components/admin/orders/Actions.js"],"names":["getAllOrder","deleteOrder","fetchData","dispatch","type","payload","responseData","setTimeout","Orders","editOrderReq","oId","status","console","log","deleteOrderReq","success","filterOrder","data","dropdown","setDropdown","newData","filter","item"],"mappings":"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","sourcesContent":["import { getAllOrder, deleteOrder } from \"./FetchApi\";\n\nexport const fetchData = async (dispatch) => {\n  dispatch({ type: \"loading\", payload: true });\n  let responseData = await getAllOrder();\n  setTimeout(() => {\n    if (responseData && responseData.Orders) {\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: responseData.Orders,\n      });\n      dispatch({ type: \"loading\", payload: false });\n    }\n  }, 1000);\n};\n\n/* This method call the editmodal & dispatch category context */\nexport const editOrderReq = (oId, type, status, dispatch) => {\n  if (type) {\n    console.log(\"click update\");\n    dispatch({ type: \"updateOrderModalOpen\", oId: oId, status: status });\n  }\n};\n\nexport const deleteOrderReq = async (oId, dispatch) => {\n  let responseData = await deleteOrder(oId);\n  console.log(responseData);\n  if (responseData && responseData.success) {\n    fetchData(dispatch);\n  }\n};\n\n/* Filter All Order */\nexport const filterOrder = async (\n  type,\n  data,\n  dispatch,\n  dropdown,\n  setDropdown\n) => {\n  let responseData = await getAllOrder();\n  if (responseData && responseData.Orders) {\n    let newData;\n    if (type === \"All\") {\n      dispatch({\n        type: \"fetchOrderAndChangeState\",\n        payload: responseData.Orders,\n      });\n      setDropdown(!dropdown);\n    } else if (type === \"Not processed\") {\n      newData = responseData.Orders.filter(\n        (item) => item.status === \"Not processed\"\n      );\n      dispatch({ type: \"fetchOrderAndChangeState\", payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === \"Processing\") {\n      newData = responseData.Orders.filter(\n        (item) => item.status === \"Processing\"\n      );\n      dispatch({ type: \"fetchOrderAndChangeState\", payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === \"Shipped\") {\n      newData = responseData.Orders.filter((item) => item.status === \"Shipped\");\n      dispatch({ type: \"fetchOrderAndChangeState\", payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === \"Delivered\") {\n      newData = responseData.Orders.filter(\n        (item) => item.status === \"Delivered\"\n      );\n      dispatch({ type: \"fetchOrderAndChangeState\", payload: newData });\n      setDropdown(!dropdown);\n    } else if (type === \"Cancelled\") {\n      newData = responseData.Orders.filter(\n        (item) => item.status === \"Cancelled\"\n      );\n      dispatch({ type: \"fetchOrderAndChangeState\", payload: newData });\n      setDropdown(!dropdown);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}